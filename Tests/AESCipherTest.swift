//
//  AESCipherTest.swift
//  AES-ArchitectureTests
//
//  Created by Leon Chamoun on 30.09.24.
//

import XCTest
@testable import AES_Visualization

final class AESCipherTest: XCTestCase {
    var cipher: AESCipher!
    
    override func setUpWithError() throws {
        let math = AESMath()
        cipher = AESCipher(keySchedule: AESKeySchedule(math: math),
                           state: AESState(math: math),
                           input: [],
                           key: [])
        super.setUp()
    }
    
    override func tearDownWithError() throws {
        cipher = nil
        super.tearDown()
    }
    
    func testEncryptState() throws {
        let input: [Byte] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34]
        let key: [Byte] = [0x2b, 0x7e, 0x15, 0x16, 0x28, 0xae, 0xd2, 0xa6, 0xab, 0xf7, 0x15, 0x88, 0x09, 0xcf, 0x4f, 0x3c]
        
        let expectedOutput: [[Byte]] = [
            [0x39, 0x02, 0xdc, 0x19],
            [0x25, 0xdc, 0x11, 0x6a],
            [0x84, 0x09, 0x85, 0x0b],
            [0x1d, 0xfb, 0x97, 0x32]
        ]
        let expectedCipherHistory: [CipherRound] = [
            CipherRound(
                index: 0,
                startOfRound: [[0x32, 0x88, 0x31, 0xe0], [0x43, 0x5a, 0x31, 0x37], [0xf6, 0x30, 0x98, 0x07], [0xa8, 0x8d, 0xa2, 0x34]],
                afterAddRound: [[0x19, 0xa0, 0x9a, 0xe9], [0x3d, 0xf4, 0xc6, 0xf8], [0xe3, 0xe2, 0x8d, 0x48], [0xbe, 0x2b, 0x2a, 0x08]],
                afterSubBytes: [[]],
                afterShiftRows: [[]],
                afterMixColumns: [[]],
                roundKey: [[0x2b, 0x28, 0xab, 0x09], [0x7e, 0xae, 0xf7, 0xcf], [0x15, 0xd2, 0x15, 0x4f], [0x16, 0xa6, 0x88, 0x3c]]
            ),
            CipherRound(
                index: 1,
                startOfRound: [[0x19, 0xa0, 0x9a, 0xe9], [0x3d, 0xf4, 0xc6, 0xf8], [0xe3, 0xe2, 0x8d, 0x48], [0xbe, 0x2b, 0x2a, 0x08]],
                afterAddRound: [[0xa4, 0x68, 0x6b, 0x02], [0x9c, 0x9f, 0x5b, 0x6a], [0x7f, 0x35, 0xea, 0x50], [0xf2, 0x2b, 0x43, 0x49]],
                afterSubBytes: [[0xd4, 0xe0, 0xb8, 0x1e], [0x27, 0xbf, 0xb4, 0x41], [0x11, 0x98, 0x5d, 0x52], [0xae, 0xf1, 0xe5, 0x30]],
                afterShiftRows: [[0xd4, 0xe0, 0xb8, 0x1e], [0xbf, 0xb4, 0x41, 0x27], [0x5d, 0x52, 0x11, 0x98], [0x30, 0xae, 0xf1, 0xe5]],
                afterMixColumns: [[0x04, 0xe0, 0x48, 0x28], [0x66, 0xcb, 0xf8, 0x06], [0x81, 0x19, 0xd3, 0x26], [0xe5, 0x9a, 0x7a, 0x4c]],
                roundKey: [[0xa0, 0x88, 0x23, 0x2a], [0xfa, 0x54, 0xa3, 0x6c], [0xfe, 0x2c, 0x39, 0x76], [0x17, 0xb1, 0x39, 0x05]]
            ),
            CipherRound(
                index: 2,
                startOfRound: [[0xa4, 0x68, 0x6b, 0x02], [0x9c, 0x9f, 0x5b, 0x6a], [0x7f, 0x35, 0xea, 0x50], [0xf2, 0x2b, 0x43, 0x49]],
                afterAddRound: [[0xaa, 0x61, 0x82, 0x68], [0x8f, 0xdd, 0xd2, 0x32], [0x5f, 0xe3, 0x4a, 0x46], [0x03, 0xef, 0xd2, 0x9a]],
                afterSubBytes: [[0x49, 0x45, 0x7f, 0x77], [0xde, 0xdb, 0x39, 0x02], [0xd2, 0x96, 0x87, 0x53], [0x89, 0xf1, 0x1a, 0x3b]],
                afterShiftRows: [[0x49, 0x45, 0x7f, 0x77], [0xdb, 0x39, 0x02, 0xde], [0x87, 0x53, 0xd2, 0x96], [0x3b, 0x89, 0xf1, 0x1a]],
                afterMixColumns: [[0x58, 0x1b, 0xdb, 0x1b], [0x4d, 0x4b, 0xe7, 0x6b], [0xca, 0x5a, 0xca, 0xb0], [0xf1, 0xac, 0xa8, 0xe5]],
                roundKey: [[0xf2, 0x7a, 0x59, 0x73], [0xc2, 0x96, 0x35, 0x59], [0x95, 0xb9, 0x80, 0xf6], [0xf2, 0x43, 0x7a, 0x7f]]
            ),
            CipherRound(
                index: 3,
                startOfRound: [[0xaa, 0x61, 0x82, 0x68], [0x8f, 0xdd, 0xd2, 0x32], [0x5f, 0xe3, 0x4a, 0x46], [0x03, 0xef, 0xd2, 0x9a]],
                afterAddRound: [[0x48, 0x67, 0x4d, 0xd6], [0x6c, 0x1d, 0xe3, 0x5f], [0x4e, 0x9d, 0xb1, 0x58], [0xee, 0x0d, 0x38, 0xe7]],
                afterSubBytes: [[0xac, 0xef, 0x13, 0x45], [0x73, 0xc1, 0xb5, 0x23], [0xcf, 0x11, 0xd6, 0x5a], [0x7b, 0xdf, 0xb5, 0xb8]],
                afterShiftRows: [[0xac, 0xef, 0x13, 0x45], [0xc1, 0xb5, 0x23, 0x73], [0xd6, 0x5a, 0xcf, 0x11], [0xb8, 0x7b, 0xdf, 0xb5]],
                afterMixColumns: [[0x75, 0x20, 0x53, 0xbb], [0xec, 0x0b, 0xc0, 0x25], [0x09, 0x63, 0xcf, 0xd0], [0x93, 0x33, 0x7c, 0xdc]],
                roundKey: [[0x3d, 0x47, 0x1e, 0x6d], [0x80, 0x16, 0x23, 0x7a], [0x47, 0xfe, 0x7e, 0x88], [0x7d, 0x3e, 0x44, 0x3b]]
            ),
            CipherRound(
                index: 4,
                startOfRound: [[0x48, 0x67, 0x4d, 0xd6], [0x6c, 0x1d, 0xe3, 0x5f], [0x4e, 0x9d, 0xb1, 0x58], [0xee, 0x0d, 0x38, 0xe7]],
                afterAddRound: [[0xe0, 0xc8, 0xd9, 0x85], [0x92, 0x63, 0xb1, 0xb8], [0x7f, 0x63, 0x35, 0xbe], [0xe8, 0xc0, 0x50, 0x01]],
                afterSubBytes: [[0x52, 0x85, 0xe3, 0xf6], [0x50, 0xa4, 0x11, 0xcf], [0x2f, 0x5e, 0xc8, 0x6a], [0x28, 0xd7, 0x07, 0x94]],
                afterShiftRows: [[0x52, 0x85, 0xe3, 0xf6], [0xa4, 0x11, 0xcf, 0x50], [0xc8, 0x6a, 0x2f, 0x5e], [0x94, 0x28, 0xd7, 0x07]],
                afterMixColumns: [[0x0f, 0x60, 0x6f, 0x5e], [0xd6, 0x31, 0xc0, 0xb3], [0xda, 0x38, 0x10, 0x13], [0xa9, 0xbf, 0x6b, 0x01]],
                roundKey: [[0xef, 0xa8, 0xb6, 0xdb], [0x44, 0x52, 0x71, 0x0b], [0xa5, 0x5b, 0x25, 0xad], [0x41, 0x7f, 0x3b, 0x00]]
            ),
            CipherRound(
                index: 5,
                startOfRound: [[0xe0, 0xc8, 0xd9, 0x85], [0x92, 0x63, 0xb1, 0xb8], [0x7f, 0x63, 0x35, 0xbe], [0xe8, 0xc0, 0x50, 0x01]],
                afterAddRound: [[0xf1, 0xc1, 0x7c, 0x5d], [0x00, 0x92, 0xc8, 0xb5], [0x6f, 0x4c, 0x8b, 0xd5], [0x55, 0xef, 0x32, 0x0c]],
                afterSubBytes: [[0xe1, 0xe8, 0x35, 0x97], [0x4f, 0xfb, 0xc8, 0x6c], [0xd2, 0xfb, 0x96, 0xae], [0x9b, 0xba, 0x53, 0x7c]],
                afterShiftRows: [[0xe1, 0xe8, 0x35, 0x97], [0xfb, 0xc8, 0x6c, 0x4f], [0x96, 0xae, 0xd2, 0xfb], [0x7c, 0x9b, 0xba, 0x53]],
                afterMixColumns: [[0x25, 0xbd, 0xb6, 0x4c], [0xd1, 0x11, 0x3a, 0x4c], [0xa9, 0xd1, 0x33, 0xc0], [0xad, 0x68, 0x8e, 0xb0]],
                roundKey: [[0xd4, 0x7c, 0xca, 0x11], [0xd1, 0x83, 0xf2, 0xf9], [0xc6, 0x9d, 0xb8, 0x15], [0xf8, 0x87, 0xbc, 0xbc]]
            ),
            CipherRound(
                index: 6,
                startOfRound: [[0xf1, 0xc1, 0x7c, 0x5d], [0x00, 0x92, 0xc8, 0xb5], [0x6f, 0x4c, 0x8b, 0xd5], [0x55, 0xef, 0x32, 0x0c]],
                afterAddRound: [[0x26, 0x3d, 0xe8, 0xfd], [0x0e, 0x41, 0x64, 0xd2], [0x2e, 0xb7, 0x72, 0x8b], [0x17, 0x7d, 0xa9, 0x25]],
                afterSubBytes: [[0xa1, 0x78, 0x10, 0x4c], [0x63, 0x4f, 0xe8, 0xd5], [0xa8, 0x29, 0x3d, 0x03], [0xfc, 0xdf, 0x23, 0xfe]],
                afterShiftRows: [[0xa1, 0x78, 0x10, 0x4c], [0x4f, 0xe8, 0xd5, 0x63], [0x3d, 0x03, 0xa8, 0x29], [0xfe, 0xfc, 0xdf, 0x23]],
                afterMixColumns: [[0x4b, 0x2c, 0x33, 0x37], [0x86, 0x4a, 0x9d, 0xd2], [0x8d, 0x89, 0xf4, 0x18], [0x6d, 0x80, 0xe8, 0xd8]],
                roundKey: [[0x6d, 0x11, 0xdb, 0xca], [0x88, 0x0b, 0xf9, 0x00], [0xa3, 0x3e, 0x86, 0x93], [0x7a, 0xfd, 0x41, 0xfd]]
            ),
            CipherRound(
                index: 7,
                startOfRound: [[0x26, 0x3d, 0xe8, 0xfd], [0x0e, 0x41, 0x64, 0xd2], [0x2e, 0xb7, 0x72, 0x8b], [0x17, 0x7d, 0xa9, 0x25]],
                afterAddRound: [[0x5a, 0x19, 0xa3, 0x7a], [0x41, 0x49, 0xe0, 0x8c], [0x42, 0xdc, 0x19, 0x04], [0xb1, 0x1f, 0x65, 0x0c]],
                afterSubBytes: [[0xf7, 0x27, 0x9b, 0x54], [0xab, 0x83, 0x43, 0xb5], [0x31, 0xa9, 0x40, 0x3d], [0xf0, 0xff, 0xd3, 0x3f]],
                afterShiftRows: [[0xf7, 0x27, 0x9b, 0x54], [0x83, 0x43, 0xb5, 0xab], [0x40, 0x3d, 0x31, 0xa9], [0x3f, 0xf0, 0xff, 0xd3]],
                afterMixColumns: [[0x14, 0x46, 0x27, 0x34], [0x15, 0x16, 0x46, 0x2a], [0xb5, 0x15, 0x56, 0xd8], [0xbf, 0xec, 0xd7, 0x43]],
                roundKey: [[0x4e, 0x5f, 0x84, 0x4e], [0x54, 0x5f, 0xa6, 0xa6], [0xf7, 0xc9, 0x4f, 0xdc], [0x0e, 0xf3, 0xb2, 0x4f]]
            ),
            CipherRound(
                index: 8,
                startOfRound: [[0x5a, 0x19, 0xa3, 0x7a], [0x41, 0x49, 0xe0, 0x8c], [0x42, 0xdc, 0x19, 0x04], [0xb1, 0x1f, 0x65, 0x0c]],
                afterAddRound: [[0xea, 0x04, 0x65, 0x85], [0x83, 0x45, 0x5d, 0x96], [0x5c, 0x33, 0x98, 0xb0], [0xf0, 0x2d, 0xad, 0xc5]],
                afterSubBytes: [[0xbe, 0xd4, 0x0a, 0xda], [0x83, 0x3b, 0xe1, 0x64], [0x2c, 0x86, 0xd4, 0xf2], [0xc8, 0xc0, 0x4d, 0xfe]],
                afterShiftRows: [[0xbe, 0xd4, 0x0a, 0xda], [0x3b, 0xe1, 0x64, 0x83], [0xd4, 0xf2, 0x2c, 0x86], [0xfe, 0xc8, 0xc0, 0x4d]],
                afterMixColumns: [[0x00, 0xb1, 0x54, 0xfa], [0x51, 0xc8, 0x76, 0x1b], [0x2f, 0x89, 0x6d, 0x99], [0xd1, 0xff, 0xcd, 0xea]],
                roundKey: [[0xea, 0xb5, 0x31, 0x7f], [0xd2, 0x8d, 0x2b, 0x8d], [0x73, 0xba, 0xf5, 0x29], [0x21, 0xd2, 0x60, 0x2f]]
            ),
            CipherRound(
                index: 9,
                startOfRound: [[0xea, 0x04, 0x65, 0x85], [0x83, 0x45, 0x5d, 0x96], [0x5c, 0x33, 0x98, 0xb0], [0xf0, 0x2d, 0xad, 0xc5]],
                afterAddRound: [[0xeb, 0x59, 0x8b, 0x1b], [0x40, 0x2e, 0xa1, 0xc3], [0xf2, 0x38, 0x13, 0x42], [0x1e, 0x84, 0xe7, 0xd2]],
                afterSubBytes: [[0x87, 0xf2, 0x4d, 0x97], [0xec, 0x6e, 0x4c, 0x90], [0x4a, 0xc3, 0x46, 0xe7], [0x8c, 0xd8, 0x95, 0xa6]],
                afterShiftRows: [[0x87, 0xf2, 0x4d, 0x97], [0x6e, 0x4c, 0x90, 0xec], [0x46, 0xe7, 0x4a, 0xc3], [0xa6, 0x8c, 0xd8, 0x95]],
                afterMixColumns: [[0x47, 0x40, 0xa3, 0x4c], [0x37, 0xd4, 0x70, 0x9f], [0x94, 0xe4, 0x3a, 0x42], [0xed, 0xa5, 0xa6, 0xbc]],
                roundKey: [[0xac, 0x19, 0x28, 0x57], [0x77, 0xfa, 0xd1, 0x5c], [0x66, 0xdc, 0x29, 0x00], [0xf3, 0x21, 0x41, 0x6e]]
            ),
            CipherRound(
                index: 10,
                startOfRound: [[0xeb, 0x59, 0x8b, 0x1b], [0x40, 0x2e, 0xa1, 0xc3], [0xf2, 0x38, 0x13, 0x42], [0x1e, 0x84, 0xe7, 0xd2]],
                afterAddRound: [[0x39, 0x02, 0xdc, 0x19], [0x25, 0xdc, 0x11, 0x6a], [0x84, 0x09, 0x85, 0x0b], [0x1d, 0xfb, 0x97, 0x32]],
                afterSubBytes: [[0xe9, 0xcb, 0x3d, 0xaf], [0x09, 0x31, 0x32, 0x2e], [0x89, 0x07, 0x7d, 0x2c], [0x72, 0x5f, 0x94, 0xb5]],
                afterShiftRows: [[0xe9, 0xcb, 0x3d, 0xaf], [0x31, 0x32, 0x2e, 0x09], [0x7d, 0x2c, 0x89, 0x07], [0xb5, 0x72, 0x5f, 0x94]],
                afterMixColumns: [[]],
                roundKey: [[0xd0, 0xc9, 0xe1, 0xb6], [0x14, 0xee, 0x3f, 0x63], [0xf9, 0x25, 0x0c, 0x0c], [0xa8, 0x89, 0xc8, 0xa6]]
            ),
            CipherRound(
                index: 11,
                startOfRound: [[0x39, 0x02, 0xdc, 0x19], [0x25, 0xdc, 0x11, 0x6a], [0x84, 0x09, 0x85, 0x0b], [0x1d, 0xfb, 0x97, 0x32]],
                afterSubBytes: [[]],
                afterShiftRows: [[]],
                afterMixColumns: [[]],
                roundKey: [[]])
        ]
        
        cipher.input = input
        cipher.key = key
        
        cipher.encryptState()
        
        XCTAssertEqual(cipher.result,
                       expectedOutput,
                       "Encrypted state is not as expected")
        
        XCTAssertEqual(cipher.getCipherHistory,
                       expectedCipherHistory,
                       "History does not match")
        
        let input2: [UInt8] = [
            0x39, 0x25, 0x84, 0x1d,
            0x02, 0xdc, 0x09, 0xfb,
            0xdc, 0x11, 0x85, 0x97,
            0x19, 0x6a, 0x0b, 0x32
        ]
        cipher.input = input2
        cipher.decryptState()
        
        let state2: [[UInt8]] = [
            [0x32, 0x88, 0x31, 0xe0],
            [0x43, 0x5a, 0x31, 0x37],
            [0xf6, 0x30, 0x98, 0x07],
            [0xa8, 0x8d, 0xa2, 0x34]
        ]
        
        XCTAssertEqual(cipher.result, state2, "Not equal")
        
        
        let testInputThree: [Byte] = [0x00, 0x11, 0x22, 0x33, 0x44, 0x55, 0x66, 0x77, 0x88, 0x99, 0xaa, 0xbb, 0xcc, 0xdd, 0xee, 0xff]
        let testKeyThree: [Byte] = [0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0d, 0x0e, 0x0f]
        let expectedOutputThree: [[Byte]] = [
            [0x69, 0x6a, 0xd8, 0x70],
            [0xc4, 0x7b, 0xcd, 0xb4],
            [0xe0, 0x04, 0xb7, 0xc5],
            [0xd8, 0x30, 0x80, 0x5a]
        ]
        
        cipher.input = testInputThree
        cipher.key = testKeyThree
        cipher.encryptState()
        
        XCTAssertEqual(cipher.result, expectedOutputThree)
        
        
        
    }
    
}
