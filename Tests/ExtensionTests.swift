//
//  ArrayTests.swift
//  Tests
//
//  Created by Leon Chamoun on 01.10.24.
//

import XCTest
@testable import AES_Visualization

final class ArrayTests: XCTestCase {
    
    override func setUpWithError() throws {
        // Put setup code here. This method is called before the invocation of each test method in the class.
    }
    
    override func tearDownWithError() throws {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }
    
    func testSplit2DArrayIntoChunks() throws {
        let array: [[Byte]] = [
            [0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08],
            [0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17]
        ]
        
        let expectedResultOne: [[Byte]] = [
            [0x01, 0x02, 0x03, 0x04],
            [0x05, 0x06, 0x07, 0x08],
            [0x10, 0x11, 0x12, 0x13],
            [0x14, 0x15, 0x16, 0x17]
        ]
        
        XCTAssertEqual(expectedResultOne, array.split2DArrayIntoChunks(chunkSize: 4))
    }
    
    func testConvertToState() throws {
        let state: [Byte] = [0x32, 0x43, 0xf6, 0xa8, 0x88, 0x5a, 0x30, 0x8d, 0x31, 0x31, 0x98, 0xa2, 0xe0, 0x37, 0x07, 0x34]
        let expectedState: [[Byte]] = [
            [0x32, 0x88, 0x31, 0xe0],
            [0x43, 0x5a, 0x31, 0x37],
            [0xf6, 0x30, 0x98, 0x07],
            [0xa8, 0x8d, 0xa2, 0x34]
        ]
        
        
        let key: [Byte] = [
            0x00, 0x01, 0x02, 0x03,
            0x04, 0x05, 0x06, 0x07,
            0x08, 0x09, 0x0A, 0x0B,
            0x0C, 0x0D, 0x0E, 0x0F,
            0x10, 0x11, 0x12, 0x13,
            0x14, 0x15, 0x16, 0x17,
            0x18, 0x19, 0x1A, 0x1B,
            0x1C, 0x1D, 0x1E, 0x1F
        ]
        
        let expectedKey: [[Byte]] =
            [
                [0x00, 0x04, 0x08, 0x0C, 0x10, 0x14, 0x18, 0x1C],
                [0x01, 0x05, 0x09, 0x0D, 0x11, 0x15, 0x19, 0x1D],
                [0x02, 0x06, 0x0A, 0x0E, 0x12, 0x16, 0x1A, 0x1E],
                [0x03, 0x07, 0x0B, 0x0F, 0x13, 0x17, 0x1B, 0x1F]
            ]
        
        
        XCTAssertEqual(state.convertToState(), expectedState, "Not equal")
        XCTAssertEqual(key.convertToState(), expectedKey, "Not equal")
    }
    
    
}
