//
//  MatrixTests.swift
//  Tests
//
//  Created by Leon Chamoun on 10.10.24.
//

import XCTest
@testable import AES_Visualization

final class MatrixTests: XCTestCase {
    var matrix: Matrix!
    
    override func setUpWithError() throws {
        matrix = Matrix(rows: 4, columns: 4)
        super.setUp()
    }
    
    override func tearDownWithError() throws {
        matrix = nil
        super.tearDown()
    }
    
    func testInvalidFields() throws {
        matrix.data = [
            ["00", "01", "02", "03"],
            ["04", "05", "06", "07"],
            ["08", "GG", "10", "11"],
            ["12", "13", "14", "OO"]
        ]
        
        for row in 0..<4 {
            for col in 0..<4 {
                matrix.validateHexInput(row: row, column: col, value: matrix.data[row][col])
            }
        }
        
        XCTAssertTrue(matrix.containsInvalidInput, "Matrix should contain invalid input")
        XCTAssertFalse(matrix.areAllFieldsValid, "All fields should not be valid")
    }
    
    func testValidFields() throws {
        matrix.data = [
            ["00", "01", "02", "03"],
            ["04", "05", "06", "07"],
            ["08", "09", "10", "11"],
            ["12", "13", "14", "15"]
        ]
        
        for row in 0..<4 {
            for col in 0..<4 {
                matrix.validateHexInput(row: row, column: col, value: matrix.data[row][col])
            }
        }
        
        XCTAssertFalse(matrix.containsInvalidInput, "Matrix should not contain any invalid input")
        XCTAssertTrue(matrix.areAllFieldsValid, "All fields should be valid")
    }
    
    func testInvalidHexCharacters() throws {
        let invalidCharacters = ["GG", "ZZ", "!!", "0g"]
        for (index, value) in invalidCharacters.enumerated() {
            let row = index / matrix.columns
            let col = index % matrix.columns
            matrix.validateHexInput(row: row, column: col, value: value)
            XCTAssertTrue(matrix.invalidInputFlags[row][col], "Value \(value) should be flagged as invalid")
        }
    }
    
    func testGenerateRandomBytes() throws {
        matrix.generateAndFillRandomBytes()
        
        for row in 0..<matrix.rows {
            for col in 0..<matrix.columns {
                XCTAssertFalse(matrix.invalidInputFlags[row][col], "Random generated byte should be valid")
                XCTAssertFalse(matrix.data[row][col].isEmpty, "Data should not contain empty strings after random generation")
            }
        }
    }
    
    func testEmptyFields() throws {
        matrix.data = [
            ["00", "01", "02", ""],
            ["04", "05", "", "07"],
            ["08", "09", "10", "11"],
            ["12", "13", "14", "15"]
        ]
        
        for row in 0..<4 {
            for col in 0..<4 {
                matrix.validateHexInput(row: row, column: col, value: matrix.data[row][col])
            }
        }
        
        XCTAssertTrue(matrix.containsInvalidInput, "Matrix should contain invalid input")
        XCTAssertFalse(matrix.areAllFieldsValid, "All fields should not be valid")
    }
    
}
